# 1 "wedding.pml"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 370 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "wedding.pml" 2
# 39 "wedding.pml"
mtype {left_bank, on_boat, right_bank}

int boat_seats[2] = -1;
bool boat_state = false;
bool is_boat_in_center = false;
mtype wedding[6] = left_bank;
bool turn = true;
bool local_turn = true;
byte count = 0;

proctype Chosed(int pair_index; bool isWoman) {

 do

 :: atomic {
   turn &&
   isWoman &&
   !is_boat_in_center &&
   (
    (wedding[pair_index+1] == left_bank && !boat_state) || (wedding[pair_index+1] == right_bank && boat_state)
    ) &&
   (boat_seats[0] == -1 || boat_seats[1] == -1)
   ->
   turn = false
  };
   wedding[pair_index+1] = on_boat;
   local_turn = true;
   if
   :: boat_seats[0] == -1 && boat_seats[1] == -1 && local_turn -> boat_seats[0] = pair_index+1; local_turn = false
   :: boat_seats[0] != -1 && boat_seats[1] == -1 && local_turn -> boat_seats[1] = pair_index+1; local_turn = false
   :: boat_seats[0] == -1 && boat_seats[1] != -1 && local_turn -> boat_seats[0] = pair_index+1; local_turn = false
   fi;
   local_turn = true;
   turn = true


 :: atomic {
   turn &&
   !isWoman &&
   !is_boat_in_center &&
   (
    (wedding[pair_index] == left_bank && !boat_state) || (wedding[pair_index] == right_bank && boat_state)
    ) &&
   (boat_seats[0] == -1 || boat_seats[1] == -1)
   ->
   turn = false
  };
   wedding[pair_index] = on_boat;
   local_turn = true;
   if
   :: boat_seats[0] == -1 && boat_seats[1] == -1 && local_turn -> boat_seats[0] = pair_index; local_turn = false
   :: boat_seats[0] != -1 && boat_seats[1] == -1 && local_turn -> boat_seats[1] = pair_index; local_turn = false
   :: boat_seats[0] == -1 && boat_seats[1] != -1 && local_turn -> boat_seats[0] = pair_index; local_turn = false
   fi;
   local_turn = true;
   turn = true


 :: atomic {
   turn && isWoman &&
   !is_boat_in_center &&
   (wedding[pair_index + 1] == on_boat)
   -> turn = false
  };







  local_turn = true;

  if

  :: local_turn && ((wedding[0] != on_boat &&
   wedding[2] != on_boat &&
   wedding[4] != on_boat ||
   wedding[pair_index] == on_boat) &&
      (
# 131 "wedding.pml"
    !boat_state &&

    (
     (!(wedding[1] == left_bank && wedding[0] != left_bank) || (wedding[2] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[3] == left_bank && wedding[2] != left_bank) || (wedding[0] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[5] == left_bank && wedding[4] != left_bank) || (wedding[0] != left_bank)&&(wedding[2] != left_bank))
    ) ||

     boat_state &&

    (
     (!(wedding[1] == right_bank && wedding[0] != right_bank) || (wedding[2] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[3] == right_bank && wedding[2] != right_bank) || (wedding[0] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[5] == right_bank && wedding[4] != right_bank) || (wedding[0] != right_bank)&&(wedding[2] != right_bank))
    )
   )) ->
    is_boat_in_center = true;
    local_turn = true;
    turn = true;


  :: !local_turn && ((wedding[0] != on_boat &&
   wedding[2] != on_boat &&
   wedding[4] != on_boat ||
   wedding[pair_index] == on_boat) &&
      (
# 169 "wedding.pml"
    !boat_state &&

    (
     (!(wedding[1] == left_bank && wedding[0] != left_bank) || (wedding[2] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[3] == left_bank && wedding[2] != left_bank) || (wedding[0] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[5] == left_bank && wedding[4] != left_bank) || (wedding[0] != left_bank)&&(wedding[2] != left_bank))
    ) ||

     boat_state &&

    (
     (!(wedding[1] == right_bank && wedding[0] != right_bank) || (wedding[2] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[3] == right_bank && wedding[2] != right_bank) || (wedding[0] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[5] == right_bank && wedding[4] != right_bank) || (wedding[0] != right_bank)&&(wedding[2] != right_bank))
    )
   )) ->
    if
    :: local_turn && !boat_state -> wedding[pair_index + 1] = left_bank; local_turn = false; turn = true
    :: local_turn && boat_state -> local_turn -> wedding[pair_index + 1] = right_bank; turn = true
    fi
  fi


 :: atomic {
   turn && !isWoman &&
   !is_boat_in_center &&
   (wedding[pair_index] == on_boat)
   -> turn = false
  };







  local_turn = true;
  if

  :: local_turn && (wedding[1] != on_boat &&
   wedding[3] != on_boat &&
   wedding[5] != on_boat ||
   wedding[pair_index + 1] == on_boat) &&
      (

    !boat_state &&
    (wedding[0] != left_bank &&
    wedding[2] != left_bank &&
    wedding[4] != left_bank) ||

    boat_state &&
    (wedding[0] != right_bank &&
    wedding[2] != right_bank &&
    wedding[4] != right_bank) ||


    !boat_state &&

    (
     (!(wedding[1] == left_bank) || (wedding[2] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[3] == left_bank) || (wedding[0] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[5] == left_bank) || (wedding[0] != left_bank)&&(wedding[2] != left_bank))
    ) ||

     boat_state &&

    (
     (!(wedding[1] == right_bank) || (wedding[2] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[3] == right_bank) || (wedding[0] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[5] == right_bank) || (wedding[0] != right_bank)&&(wedding[2] != right_bank))
    )
   ) ->
    is_boat_in_center = true;
    local_turn = true;
    turn = true;


  :: !local_turn && (wedding[1] != on_boat &&
   wedding[3] != on_boat &&
   wedding[5] != on_boat ||
   wedding[pair_index + 1] == on_boat) &&
      (

    !boat_state &&
    (wedding[0] != left_bank &&
    wedding[2] != left_bank &&
    wedding[4] != left_bank) ||

    boat_state &&
    (wedding[0] != right_bank &&
    wedding[2] != right_bank &&
    wedding[4] != right_bank) ||


    !boat_state &&

    (
     (!(wedding[1] == left_bank) || (wedding[2] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[3] == left_bank) || (wedding[0] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[5] == left_bank) || (wedding[0] != left_bank)&&(wedding[2] != left_bank))
    ) ||

     boat_state &&

    (
     (!(wedding[1] == right_bank) || (wedding[2] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[3] == right_bank) || (wedding[0] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[5] == right_bank) || (wedding[0] != right_bank)&&(wedding[2] != right_bank))
    )
   ) ->
   if
   :: local_turn && !boat_state -> wedding[pair_index] = left_bank; local_turn = true; turn = true
   :: local_turn && boat_state -> wedding[pair_index] = right_bank; turn = true
   fi
  fi

 :: atomic {
   turn && !isWoman &&
   is_boat_in_center &&
   (wedding[pair_index] == on_boat)
   -> turn = false
  };





  local_turn = true;
  if
  :: local_turn &&
   (
    !boat_state &&
       (

     (!(wedding[1]==right_bank) || (wedding[0]==right_bank))&&
     (!(wedding[3]==right_bank) || (wedding[2]==right_bank))&&
     (!(wedding[5]==right_bank) || (wedding[4]==right_bank))||

     (wedding[pair_index + 1] == right_bank)&&
     ( true)
    )||

    boat_state &&
       (

     (!(wedding[1]==left_bank) || (wedding[0]==left_bank))&&
     (!(wedding[3]==left_bank) || (wedding[2]==left_bank))&&
     (!(wedding[5]==left_bank) || (wedding[4]==left_bank))||


     (wedding[pair_index + 1] == left_bank)&&
     ( true)
    )
   ) ->
    if
    :: boat_seats[0] != -1 && boat_seats[1] != -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[0]] = right_bank;
      wedding[boat_seats[1]] = right_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[0]] = left_bank;
      wedding[boat_seats[1]] = left_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[0] = -1;
     boat_seats[1] = -1;
     is_boat_in_center = false;
     boat_state = !boat_state;
     count++
    :: boat_seats[0] != -1 && boat_seats[1] == -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[0]] = right_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[0]] = left_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[0] = -1;
     is_boat_in_center = false;
     boat_state = !boat_state;
     count++
    :: boat_seats[0] == -1 && boat_seats[1] != -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[1]] = right_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[1]] = left_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[1] = -1;
     is_boat_in_center = false;
     boat_state = !boat_state;
     count++
    fi;
    local_turn = true;
    turn = true;

  :: !local_turn &&
   (
    !boat_state &&
       (

     (!(wedding[1]==right_bank) || (wedding[0]==right_bank))&&
     (!(wedding[3]==right_bank) || (wedding[2]==right_bank))&&
     (!(wedding[5]==right_bank) || (wedding[4]==right_bank))||

     (wedding[pair_index + 1] == right_bank)&&
     ( true)
    )||

    boat_state &&
       (

     (!(wedding[1]==left_bank) || (wedding[0]==left_bank))&&
     (!(wedding[3]==left_bank) || (wedding[2]==left_bank))&&
     (!(wedding[5]==left_bank) || (wedding[4]==left_bank))||


     (wedding[pair_index + 1] == left_bank)&&
     ( true)
    )
   ) ->
    if
    :: boat_seats[0] != -1 && boat_seats[1] != -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[0]] = left_bank;
      wedding[boat_seats[1]] = left_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[0]] = right_bank;
      wedding[boat_seats[1]] = right_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[0] = -1;
     boat_seats[1] = -1;
     is_boat_in_center = false;
    :: boat_seats[0] != -1 && boat_seats[1] == -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[0]] = left_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[0]] = right_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[0] = -1;
     is_boat_in_center = false;
    :: boat_seats[0] == -1 && boat_seats[1] != -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[1]] = left_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[1]] = right_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[1] = -1;
     is_boat_in_center = false;
    fi;
    local_turn = false;
    turn = true;
  fi


 :: atomic {
   turn && isWoman &&
   is_boat_in_center &&
   (wedding[pair_index + 1] == on_boat)
   -> turn = false
  };






  local_turn = true;
  if
  :: local_turn && (!((wedding[0]==on_boat) || (wedding[2]==on_boat) || (wedding[4]==on_boat)) ||
      (
    (!boat_state &&
     (!(wedding[1]==right_bank) || (wedding[0]==right_bank))&&
     (!(wedding[3]==right_bank) || (wedding[2]==right_bank))&&
     (!(wedding[5]==right_bank) || (wedding[4]==right_bank)) ||

    boat_state &&
     (!(wedding[1]==left_bank) || (wedding[0]==left_bank))&&
     (!(wedding[3]==left_bank) || (wedding[2]==left_bank))&&
     (!(wedding[5]==left_bank) || (wedding[4]==left_bank))
    )
      )
     )&&
     (!((wedding[1]==on_boat)&&((pair_index + 1)!=1) || (wedding[3]==on_boat)&&((pair_index + 1)!=3) || (wedding[5]==on_boat)&&((pair_index + 1)!=5)) ||
      (

    !boat_state &&

    (
     (!(wedding[1] == on_boat) || (wedding[2] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[3] == on_boat) || (wedding[0] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[5] == on_boat) || (wedding[0] != right_bank)&&(wedding[2] != right_bank))
    ) ||

     boat_state &&

    (
     (!(wedding[1] == on_boat) || (wedding[2] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[3] == on_boat) || (wedding[0] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[5] == on_boat) || (wedding[0] != left_bank)&&(wedding[2] != left_bank))
    )
   )
     ) ->
     if
    :: boat_seats[0] != -1 && boat_seats[1] != -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[0]] = right_bank;
      wedding[boat_seats[1]] = right_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[0]] = left_bank;
      wedding[boat_seats[1]] = left_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[0] = -1;
     boat_seats[1] = -1;
     is_boat_in_center = false;
     boat_state = !boat_state;
     count++
    :: boat_seats[0] != -1 && boat_seats[1] == -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[0]] = right_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[0]] = left_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[0] = -1;
     is_boat_in_center = false;
     boat_state = !boat_state;
     count++
    :: boat_seats[0] == -1 && boat_seats[1] != -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[1]] = right_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[1]] = left_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[1] = -1;
     is_boat_in_center = false;
     boat_state = !boat_state;
     count++
    fi;
    local_turn = true;
    turn = true;

  :: !local_turn && (!((wedding[0]==on_boat) || (wedding[2]==on_boat) || (wedding[4]==on_boat)) ||
      (
    (!boat_state &&
     (!(wedding[1]==right_bank) || (wedding[0]==right_bank))&&
     (!(wedding[3]==right_bank) || (wedding[2]==right_bank))&&
     (!(wedding[5]==right_bank) || (wedding[4]==right_bank)) ||

    boat_state &&
     (!(wedding[1]==left_bank) || (wedding[0]==left_bank))&&
     (!(wedding[3]==left_bank) || (wedding[2]==left_bank))&&
     (!(wedding[5]==left_bank) || (wedding[4]==left_bank))
    )
      )
     )&&
     (!((wedding[1]==on_boat)&&((pair_index + 1)!=1) || (wedding[3]==on_boat)&&((pair_index + 1)!=3) || (wedding[5]==on_boat)&&((pair_index + 1)!=5)) ||
      (

    !boat_state &&

    (
     (!(wedding[1] == on_boat) || (wedding[2] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[3] == on_boat) || (wedding[0] != right_bank)&&(wedding[4] != right_bank)) &&
      (!(wedding[5] == on_boat) || (wedding[0] != right_bank)&&(wedding[2] != right_bank))
    ) ||

     boat_state &&

    (
     (!(wedding[1] == on_boat) || (wedding[2] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[3] == on_boat) || (wedding[0] != left_bank)&&(wedding[4] != left_bank)) &&
      (!(wedding[5] == on_boat) || (wedding[0] != left_bank)&&(wedding[2] != left_bank))
    )
   )
     ) ->
   if
    :: boat_seats[0] != -1 && boat_seats[1] != -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[0]] = left_bank;
      wedding[boat_seats[1]] = left_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[0]] = right_bank;
      wedding[boat_seats[1]] = right_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[0] = -1;
     boat_seats[1] = -1;
     is_boat_in_center = false;
    :: boat_seats[0] != -1 && boat_seats[1] == -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[0]] = left_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[0]] = right_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[0] = -1;
     is_boat_in_center = false;
    :: boat_seats[0] == -1 && boat_seats[1] != -1 ->
     local_turn = true;
     if
     :: !boat_state && local_turn ->
      wedding[boat_seats[1]] = left_bank;
      local_turn = false;
     :: boat_state && local_turn ->
      wedding[boat_seats[1]] = right_bank;
      local_turn = false;
     fi;
     local_turn = true;
     boat_seats[1] = -1;
     is_boat_in_center = false;
    fi;
    local_turn = false;
    turn = true;
  fi
 od
}

active proctype P1() { run Chosed(0, false) }
active proctype P2() { run Chosed(0, true) }
active proctype P3() { run Chosed(2, false) }
active proctype P4() { run Chosed(2, true) }
active proctype P5() { run Chosed(4, false) }
active proctype P6() { run Chosed(4, true) }





ltl f0 { true == !always (!(wedding[0] == right_bank) && (wedding[1] == right_bank) && (wedding[2] == right_bank) && (wedding[3] == right_bank) && (wedding[4] == right_bank) && (wedding[5] == right_bank)) }
