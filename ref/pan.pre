# 1 "wedding.pml"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 370 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "wedding.pml" 2
# 30 "wedding.pml"
mtype {left_bank, on_boat, right_bank}

mtype wedding_team[2*2] = left_bank;

bit boat_state = 0;
bit boat_direction = 1;
int boat_seats[2] = -1;

int count;
bool turn = false;

proctype Chosed(int i) {
 if
 :: turn && (wedding_team[i]==on_boat) ->
  if
  :: (boat_direction == 0) ->

    if
    :: boat_seats[0] != -1 -> wedding_team[boat_seats[0]] = left_bank; boat_seats[0] = -1;
    fi;
    if
    :: boat_seats[1] != -1 -> wedding_team[boat_seats[1]] = left_bank; boat_seats[1] = -1;
    fi;

    boat_state = 0;
    boat_direction = 1;
    turn = false;
    count = count + 1;


  :: else ->

    if
    :: boat_seats[0] != -1 -> wedding_team[boat_seats[0]] = right_bank; boat_seats[0] = -1;
    fi;
    if
    :: boat_seats[1] != -1 -> wedding_team[boat_seats[1]] = right_bank; boat_seats[1] = -1;
    fi;
    boat_direction = 0;
    boat_state = 1;
    turn = false;
    count = count + 1;

  fi;

 :: turn && (wedding_team[i] == left_bank) &&
  (boat_seats[0] != -1 || boat_seats[1] != -1) &&
  (boat_state == 0) &&
  (boat_direction == 1) ->

    wedding_team[i] = on_boat;
    if
    :: boat_seats[0] != -1 -> boat_seats[0] = i;
    :: else -> boat_seats[1] = i;
    fi;
    turn = false;

 :: turn && (wedding_team[i] == right_bank) &&
  (boat_seats[0] != -1 || boat_seats[1] != -1) &&
  (boat_state == 1) &&
  (boat_direction == 0) ->

    wedding_team[i] = on_boat;
    if
    :: boat_seats[0] != -1 -> boat_seats[0] = i;
    :: else -> boat_seats[1] = i;
    fi;
    turn = false;

 fi
}

active proctype P() {
 do
 :: run Chosed(0);
 :: run Chosed(1);
 :: run Chosed(2);
 :: run Chosed(3);
 od
}



ltl f0 { false == (always (!(wedding_team[0] == right_bank) && (wedding_team[1] == right_bank) && (wedding_team[2] == right_bank) && (wedding_team[3] == right_bank))) }
